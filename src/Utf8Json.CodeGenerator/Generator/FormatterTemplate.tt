<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Utf8Json.CodeGenerator.Generator.StringKey" #>
#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 219
#pragma warning disable 168

namespace <#= Namespace #>
{
    using System;
    using Utf8Json;

<# foreach(var objInfo in objectSerializationInfos) { #>

    public sealed class <#= objInfo.Name #>Formatter : global::Utf8Json.IJsonFormatter<<#= objInfo.FullName #>>
    {
        private readonly byte[][] ____stringByteKeys;

        public <#= objInfo.Name #>Formatter()
        {
            this.____stringByteKeys = new byte[][]
            {
<#
    var index = 0;
    foreach(var x in objInfo.Members.Where(x => x.IsReadable)) { 
        byte[] rawBytes = index++ == 0 ? Utf8Json.JsonWriter.GetEncodedPropertyNameWithBeginObject(x.Name) : Utf8Json.JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator(x.Name);
#>
                // <#= x.Name #>
                <#= StringKey.FormatterGeneratorHelper.ToStringNewByteArray(rawBytes) #>,
<#}#>
            };
        }

        public void Serialize(ref JsonWriter writer, <#= objInfo.FullName #> value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
<# if( objInfo.IsClass) { #>
            if (value == null)
            {
                writer.WriteNull();
                return;
            }

<# } #>
<# index = 0; foreach(var x in objInfo.Members.Where(x=>x.IsReadable)) { #>
            writer.WriteRaw(this.____stringByteKeys[<#= index++ #>]);
            <#= x.GetSerializeMethodString() #>;
<# } #>
            writer.WriteEndObject();
        }

        public <#= objInfo.FullName #> Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
<# if( objInfo.IsClass) { #>
                return null;
<# } else { #>
                throw new InvalidOperationException("typecode is null, struct not supported");
<# } #>
            }
            
<# if( !objInfo.HasConstructor) { #>            
	        throw new InvalidOperationException("generated serializer for IInterface does not support deserialize.");

<# } else { #>
<# foreach(var x in objInfo.Members) { #>
            var __<#= x.MemberName #>__ = default(<#= x.Type #>);
            var __<#= x.MemberName #>__b__ = false;
<# }
  const string indent = "                        ";
  var members = StringKey.FormatterGeneratorHelper.GetSortedStringKeys(objInfo.Members);
  var lengthEnumerable = new StringKey.LengthGroupEnumerable(members);
  var lessThan8 = lengthEnumerable.TakeWhile(x => x.Span[0].Item1.Length < 8).ToArray();
  var greaterThan7 = lengthEnumerable.SkipWhile(x => x.Span[0].Item1.Length < 8).ToArray();
#>

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
<#
    if (lessThan8.Length == 0)
    {
        if (greaterThan7.Length == 0)
        {#>
                reader.ReadStringSegmentRaw();
                reader.ReadIsNameSeparatorWithVerify();
                reader.ReadNextBlock();
<#
        }
        else
        {#>
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                var array = stringKey.Array;
                var offset = stringKey.Offset;
                switch(stringKey.Count)
                {
                    default:
                    FAIL:
                        reader.ReadNextBlock();
                        continue;
<#
            foreach(var tuple in greaterThan7)
            {
                var (readOnlyMemory, member) = tuple.Span[0];
#>
                    case <#= readOnlyMemory.Length #>:
<#= tuple.EmbedSwitch(readOnlyMemory.Length % 8, indent, readOnlyMemory.Length >> 3) #>
<#
            }#>
                }
<#
        }
    }
    else
    {
        if (greaterThan7.Length == 0)
        {#>
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                var array = stringKey.Array;
                var offset = stringKey.Offset;
                switch(stringKey.Count)
                {
                    default:
                    FAIL:
                        reader.ReadNextBlock();
                        continue;
<#
            foreach(var tuple in lessThan8)
            {
                var (readOnlyMemory, member) = tuple.Span[0];
#>
                    case <#= readOnlyMemory.Length #>:
<#= tuple.Span.EmbedSwitchLast(readOnlyMemory.Length, indent) #>
<#
            }#>
                }
<#
        }
        else
        {#>
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                var array = stringKey.Array;
                var offset = stringKey.Offset;
                switch(stringKey.Count)
                {
                    default:
                    FAIL:
                        reader.ReadNextBlock();
                        continue;
<#
            foreach(var tuple in lessThan8)
            {
                var (readOnlyMemory, member) = tuple.Span[0];
#>
                    case <#= readOnlyMemory.Length #>:
<#= tuple.Span.EmbedSwitchLast(readOnlyMemory.Length, indent) #>
<#
            }#>
<#
            foreach(var tuple in greaterThan7)
            {
                var (readOnlyMemory, member) = tuple.Span[0];
#>
                    case <#= readOnlyMemory.Length #>:
<#= tuple.EmbedSwitch(readOnlyMemory.Length % 8, indent, readOnlyMemory.Length >> 3) #>
<#
            }#>
                }
<#
        }
    }#>
            }

            var ____result = new <#= objInfo.GetConstructorString()  #>;
<# foreach(var x in objInfo.Members.Where(x => x.IsWritable)) { #>
            if(__<#= x.MemberName #>__b__) ____result.<#= x.MemberName #> = __<#= x.MemberName #>__;
<# } #>

            return ____result;
<# } #>
        }
    }

<# } #>
}

#pragma warning disable 168
#pragma warning restore 219
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612