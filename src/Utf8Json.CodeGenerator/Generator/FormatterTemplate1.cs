// ------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン: 16.0.0.0
//  
//     このファイルへの変更は、正しくない動作の原因になる可能性があり、
//     コードが再生成されると失われます。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Utf8Json.CodeGenerator.Generator
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Utf8Json.CodeGenerator.Generator.StringKey;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class FormatterTemplate : FormatterTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("#pragma warning disable 618\r\n#pragma warning disable 612\r\n#pragma warning disable" +
                    " 414\r\n#pragma warning disable 219\r\n#pragma warning disable 168\r\n\r\nnamespace ");
            
            #line 13 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    using System;\r\n    using Utf8Json;\r\n\r\n");
            
            #line 18 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"
 foreach(var objInfo in objectSerializationInfos) { 
            
            #line default
            #line hidden
            this.Write("\r\n    public sealed class ");
            
            #line 20 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objInfo.Name));
            
            #line default
            #line hidden
            this.Write("Formatter : global::Utf8Json.IJsonFormatter<");
            
            #line 20 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objInfo.FullName));
            
            #line default
            #line hidden
            this.Write(">\r\n    {\r\n        private readonly byte[][] ____stringByteKeys;\r\n\r\n        public" +
                    " ");
            
            #line 24 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objInfo.Name));
            
            #line default
            #line hidden
            this.Write("Formatter()\r\n        {\r\n            this.____stringByteKeys = new byte[][]\r\n     " +
                    "       {\r\n");
            
            #line 28 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"

    var index = 0;
    foreach(var x in objInfo.Members.Where(x => x.IsReadable)) { 
        byte[] rawBytes = index++ == 0 ? Utf8Json.JsonWriter.GetEncodedPropertyNameWithBeginObject(x.Name) : Utf8Json.JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator(x.Name);

            
            #line default
            #line hidden
            this.Write("                // ");
            
            #line 33 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(x.Name));
            
            #line default
            #line hidden
            this.Write("\r\n                ");
            
            #line 34 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringKey.FormatterGeneratorHelper.ToStringNewByteArray(rawBytes)));
            
            #line default
            #line hidden
            this.Write(",\r\n");
            
            #line 35 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("            };\r\n        }\r\n\r\n        public void Serialize(ref JsonWriter writer," +
                    " ");
            
            #line 39 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objInfo.FullName));
            
            #line default
            #line hidden
            this.Write(" value, global::Utf8Json.IJsonFormatterResolver formatterResolver)\r\n        {\r\n");
            
            #line 41 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"
 if( objInfo.IsClass) { 
            
            #line default
            #line hidden
            this.Write("            if (value == null)\r\n            {\r\n                writer.WriteNull()" +
                    ";\r\n                return;\r\n            }\r\n\r\n");
            
            #line 48 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 49 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"
 index = 0; foreach(var x in objInfo.Members.Where(x=>x.IsReadable)) { 
            
            #line default
            #line hidden
            this.Write("            writer.WriteRaw(this.____stringByteKeys[");
            
            #line 50 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(index++));
            
            #line default
            #line hidden
            this.Write("]);\r\n            ");
            
            #line 51 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(x.GetSerializeMethodString()));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 52 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("            writer.WriteEndObject();\r\n        }\r\n\r\n        public ");
            
            #line 56 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objInfo.FullName));
            
            #line default
            #line hidden
            this.Write(" Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver forma" +
                    "tterResolver)\r\n        {\r\n            if (reader.ReadIsNull())\r\n            {\r\n");
            
            #line 60 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"
 if( objInfo.IsClass) { 
            
            #line default
            #line hidden
            this.Write("                return null;\r\n");
            
            #line 62 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("                throw new InvalidOperationException(\"typecode is null, struct not" +
                    " supported\");\r\n");
            
            #line 64 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("            }\r\n            \r\n");
            
            #line 67 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"
 if( !objInfo.HasConstructor) { 
            
            #line default
            #line hidden
            this.Write("            \r\n\t        throw new InvalidOperationException(\"generated serializer " +
                    "for IInterface does not support deserialize.\");\r\n\r\n");
            
            #line 70 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"
 } else { 
            
            #line default
            #line hidden
            
            #line 71 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"
 foreach(var x in objInfo.Members) { 
            
            #line default
            #line hidden
            this.Write("            var __");
            
            #line 72 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(x.MemberName));
            
            #line default
            #line hidden
            this.Write("__ = default(");
            
            #line 72 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(x.Type));
            
            #line default
            #line hidden
            this.Write(");\r\n            var __");
            
            #line 73 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(x.MemberName));
            
            #line default
            #line hidden
            this.Write("__b__ = false;\r\n");
            
            #line 74 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"
 }
  const string indent = "                        ";
  var members = StringKey.FormatterGeneratorHelper.GetSortedStringKeys(objInfo.Members);
  var lengthEnumerable = new StringKey.LengthGroupEnumerable(members);
  var lessThan8 = lengthEnumerable.TakeWhile(x => x.Span[0].Item1.Length < 8).ToArray();
  var greaterThan7 = lengthEnumerable.SkipWhile(x => x.Span[0].Item1.Length < 8).ToArray();

            
            #line default
            #line hidden
            this.Write("\r\n            var ____count = 0;\r\n            reader.ReadIsBeginObjectWithVerify(" +
                    ");\r\n            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____cou" +
                    "nt))\r\n            {\r\n");
            
            #line 86 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"

    if (lessThan8.Length == 0)
    {
        if (greaterThan7.Length == 0)
        {
            
            #line default
            #line hidden
            this.Write("                reader.ReadStringSegmentRaw();\r\n                reader.ReadIsName" +
                    "SeparatorWithVerify();\r\n                reader.ReadNextBlock();\r\n");
            
            #line 94 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"

        }
        else
        {
            
            #line default
            #line hidden
            this.Write(@"                var stringKey = reader.ReadPropertyNameSegmentRaw();
                var array = stringKey.Array;
                var offset = stringKey.Offset;
                switch(stringKey.Count)
                {
                    default:
                    FAIL:
                        reader.ReadNextBlock();
                        continue;
");
            
            #line 107 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"

            foreach(var tuple in greaterThan7)
            {
                var (readOnlyMemory, member) = tuple.Span[0];

            
            #line default
            #line hidden
            this.Write("                    case ");
            
            #line 112 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(readOnlyMemory.Length));
            
            #line default
            #line hidden
            this.Write(":\r\n");
            
            #line 113 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tuple.EmbedSwitch(readOnlyMemory.Length % 8, indent, readOnlyMemory.Length >> 3)));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 114 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"

            }
            
            #line default
            #line hidden
            this.Write("                }\r\n");
            
            #line 117 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"

        }
    }
    else
    {
        if (greaterThan7.Length == 0)
        {
            
            #line default
            #line hidden
            this.Write(@"                var stringKey = reader.ReadPropertyNameSegmentRaw();
                var array = stringKey.Array;
                var offset = stringKey.Offset;
                switch(stringKey.Count)
                {
                    default:
                    FAIL:
                        reader.ReadNextBlock();
                        continue;
");
            
            #line 133 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"

            foreach(var tuple in lessThan8)
            {
                var (readOnlyMemory, member) = tuple.Span[0];

            
            #line default
            #line hidden
            this.Write("                    case ");
            
            #line 138 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(readOnlyMemory.Length));
            
            #line default
            #line hidden
            this.Write(":\r\n");
            
            #line 139 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tuple.Span.EmbedSwitchLast(readOnlyMemory.Length, indent)));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 140 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"

            }
            
            #line default
            #line hidden
            this.Write("                }\r\n");
            
            #line 143 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"

        }
        else
        {
            
            #line default
            #line hidden
            this.Write(@"                var stringKey = reader.ReadPropertyNameSegmentRaw();
                var array = stringKey.Array;
                var offset = stringKey.Offset;
                switch(stringKey.Count)
                {
                    default:
                    FAIL:
                        reader.ReadNextBlock();
                        continue;
");
            
            #line 156 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"

            foreach(var tuple in lessThan8)
            {
                var (readOnlyMemory, member) = tuple.Span[0];

            
            #line default
            #line hidden
            this.Write("                    case ");
            
            #line 161 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(readOnlyMemory.Length));
            
            #line default
            #line hidden
            this.Write(":\r\n");
            
            #line 162 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tuple.Span.EmbedSwitchLast(readOnlyMemory.Length, indent)));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 163 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"

            }
            
            #line default
            #line hidden
            
            #line 165 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"

            foreach(var tuple in greaterThan7)
            {
                var (readOnlyMemory, member) = tuple.Span[0];

            
            #line default
            #line hidden
            this.Write("                    case ");
            
            #line 170 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(readOnlyMemory.Length));
            
            #line default
            #line hidden
            this.Write(":\r\n");
            
            #line 171 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tuple.EmbedSwitch(readOnlyMemory.Length % 8, indent, readOnlyMemory.Length >> 3)));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 172 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"

            }
            
            #line default
            #line hidden
            this.Write("                }\r\n");
            
            #line 175 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"

        }
    }
            
            #line default
            #line hidden
            this.Write("            }\r\n\r\n            var ____result = new ");
            
            #line 180 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objInfo.GetConstructorString()));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 181 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"
 foreach(var x in objInfo.Members.Where(x => x.IsWritable)) { 
            
            #line default
            #line hidden
            this.Write("            if(__");
            
            #line 182 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(x.MemberName));
            
            #line default
            #line hidden
            this.Write("__b__) ____result.");
            
            #line 182 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(x.MemberName));
            
            #line default
            #line hidden
            this.Write(" = __");
            
            #line 182 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(x.MemberName));
            
            #line default
            #line hidden
            this.Write("__;\r\n");
            
            #line 183 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n            return ____result;\r\n");
            
            #line 186 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("        }\r\n    }\r\n\r\n");
            
            #line 190 "C:\Users\conve\source\repos\Utf8Json\src\Utf8Json.CodeGenerator\Generator\FormatterTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("}\r\n\r\n#pragma warning disable 168\r\n#pragma warning restore 219\r\n#pragma warning re" +
                    "store 414\r\n#pragma warning restore 618\r\n#pragma warning restore 612");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class FormatterTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
